## Regras de Segurança do Firestore (firestore.rules)

// TODO: Definir regras de segurança detalhadas para cada coleção.
// Exemplo inicial (permitir leitura e escrita para autenticados, ajustar conforme necessário):

rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Usuários: Perfis podem ser lidos por qualquer um, escritos apenas pelo dono ou admin.
    match /users/{userId} {
      allow read: if true;
      allow write: if request.auth != null && (request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }
    match /user_profiles/{userId} {
      allow read: if true;
      allow write: if request.auth != null && (request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }

    // Planos: Leitura pública, escrita apenas por admins.
    match /plans/{planId} {
      allow read: if true;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Pagamentos: Apenas o usuário dono ou admin podem ler/escrever.
    match /payments/{paymentId} {
      allow read, write: if request.auth != null && (request.resource.data.userId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }

    // Artigos: Leitura pública para artigos publicados, escrita pelo autor ou admin.
    match /articles/{articleId} {
      allow read: if resource.data.status == 'PUBLISHED' || (request.auth != null && (resource.data.authorId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'));
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && (resource.data.authorId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }

    // Comentários: Leitura para todos, escrita por autenticados, delete/update pelo autor ou admin.
    match /comments/{commentId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && (resource.data.userId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }

    // Questões: Leitura para publicados, escrita por admins ou roles específicas.
    match /questions/{questionId} {
      allow read: if resource.data.status == 'PUBLISHED' || (request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'mentor']); // Ajustar roles
      allow create, update, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'mentor']; // Ajustar roles
    }

    // Listas de Questões: Leitura/escrita pelo dono ou admin.
    match /question_lists/{listId} {
      allow read, write: if request.auth != null && (resource.data.userId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }
    match /user_favorite_question_lists/{favId} {
        allow read, write: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }

    // Simulados: Leitura para publicados, escrita por admins ou roles específicas.
    match /simulated_exams/{examId} {
      allow read: if resource.data.status == 'PUBLISHED' || resource.data.isPublic == true || (request.auth != null && (resource.data.createdBy == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'mentor']));
      allow create: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'mentor'];
      allow update, delete: if request.auth != null && (resource.data.createdBy == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }
    match /simulated_exam_results/{resultId} {
      allow read, write: if request.auth != null && (resource.data.userId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }

    // Mentorias: Acesso restrito ao mentor, estudante ou admin.
    match /mentorships/{mentorshipId} {
      allow read, write: if request.auth != null && (resource.data.mentorId == request.auth.uid || resource.data.studentId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }
    // Subcoleções de mentorias (meetings, objectives, feedback, resources, assigned_exams) devem herdar ou ter regras específicas.
    match /mentorships/{mentorshipId}/{subCollection}/{docId} {
        allow read, write: if request.auth != null && (get(/databases/$(database)/documents/mentorships/$(mentorshipId)).data.mentorId == request.auth.uid || get(/databases/$(database)/documents/mentorships/$(mentorshipId)).data.studentId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }

    // Notificações: Apenas o usuário dono pode ler/escrever.
    match /notifications/{notificationId} {
      allow read, write: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    // UserPlans: Apenas o usuário dono ou admin podem ler/escrever.
    match /user_plans/{userPlanId} {
        allow read, write: if request.auth != null && (request.resource.data.userId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }

    // Outras coleções (tags, categories, achievements, user_achievements, etc.) devem ter regras específicas.
    match /tags/{tagId} {
        allow read: if true;
        allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    match /categories/{categoryId} {
        allow read: if true;
        allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Default deny all (implicit)
  }
}

